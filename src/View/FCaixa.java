package View;

import DAO.ProdutoDAO;
import Mode.Produtos;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

public class FCaixa extends javax.swing.JFrame {

    private ArrayList<Produtos> listaProdutos;
    private ProdutoDAO produtoDAO;
    private List<Produtos> produtosSelecionados;

    public FCaixa() {
        initComponents();
        this.produtoDAO = new ProdutoDAO();
        this.listaProdutos = new ArrayList<>();
        carregarProdutos();
        this.produtosSelecionados = new ArrayList<>();

        jTCaixa.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting() && jTCaixa.getSelectedRow() != -1) {
                    int selectedRow = jTCaixa.getSelectedRow();
                    String nomeProduto = (String) jTCaixa.getValueAt(selectedRow, 1);
                    fbProduto.setText("Produto: " + nomeProduto);
                }
            }
        });
    }

    // Método initializeTable() para preencher a tabela com os produtos
    private void initializeTable() {
        DefaultTableModel modelo = new DefaultTableModel();
        jTCaixa.setModel(modelo); // Define o modelo da tabela
        String[] colunas = {"ID", "Nome", "Categoria", "Valor", "Quantidade"};
        modelo.setColumnIdentifiers(colunas); // Define as colunas da tabela

        if (listaProdutos != null && !listaProdutos.isEmpty()) {
            for (Produtos produto : listaProdutos) {
                Object[] linha = {produto.getIdproduto(), produto.getNome(), produto.getCategoria(), produto.getValor(), produto.getQuantidade()};
                modelo.addRow(linha); // Adiciona uma linha na tabela para cada produto
            }
        } else {
            JOptionPane.showMessageDialog(null, "Não há produtos para exibir na tabela.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }

    // Método para carregar todos os produtos do banco de dados e preencher a tabela
    private void carregarProdutos() {
        try {
            listaProdutos = produtoDAO.listarProdutos(); // Carrega todos os produtos do banco de dados
            initializeTable(); // Preenche a tabela com os produtos carregados
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar produtos: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Método para atualizar a tabela com os produtos filtrados por categoria ou nome
    private void updateTable(String filtro) {
        DefaultTableModel modelo = new DefaultTableModel();
        jTCaixa.setModel(modelo); // Define o modelo da tabela
        String[] colunas = {"ID", "Nome", "Categoria", "Valor", "Quantidade"};
        modelo.setColumnIdentifiers(colunas); // Define as colunas da tabela

        try {
            // Realiza a busca no banco de dados com base no filtro (nome ou categoria)
            listaProdutos = produtoDAO.listarProdutosPorNomeOuCategoria(filtro, filtro); // Ajuste aqui para passar o filtro duas vezes

            if (listaProdutos.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Nenhum produto encontrado com o filtro: " + filtro, "Aviso", JOptionPane.INFORMATION_MESSAGE);
            }

            // Preenche a tabela com os produtos encontrados
            for (Produtos produto : listaProdutos) {
                Object[] linha = {produto.getIdproduto(), produto.getNome(), produto.getCategoria(), produto.getValor(), produto.getQuantidade()};
                modelo.addRow(linha); // Adiciona uma linha na tabela para cada produto
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao buscar produtos: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTCaixa = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        label1 = new javax.swing.JLabel();
        btnTodos = new javax.swing.JButton();
        btnBebidas = new javax.swing.JButton();
        btnBebidasA = new javax.swing.JButton();
        btnPorcoes = new javax.swing.JButton();
        btnOutros = new javax.swing.JButton();
        btnDeB = new javax.swing.JButton();
        fbProduto = new javax.swing.JLabel();
        label = new javax.swing.JLabel();
        txtQuantidade = new javax.swing.JTextField();
        btnAdicionar = new javax.swing.JButton();
        btnBis = new javax.swing.JButton();
        txtPesquisa = new javax.swing.JTextField();
        btnPesquisar = new javax.swing.JButton();
        btnPagar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        NunesBar = new javax.swing.JLabel();
        Logo = new javax.swing.JLabel();
        btnMenu = new javax.swing.JButton();
        fundo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setLayout(null);

        jTCaixa.setBackground(new java.awt.Color(102, 102, 102));
        jTCaixa.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTCaixa.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jTCaixa.setForeground(new java.awt.Color(255, 255, 255));
        jTCaixa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTCaixa.setAlignmentX(2.0F);
        jTCaixa.setAlignmentY(2.0F);
        jTCaixa.setRowHeight(60);
        jScrollPane1.setViewportView(jTCaixa);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 50, 650, 350);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Tabela de Produtos");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 20, 174, 25);

        label1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        label1.setForeground(new java.awt.Color(255, 255, 255));
        label1.setText("Pesquisa de Produto:");
        jPanel1.add(label1);
        label1.setBounds(670, 50, 180, 40);

        btnTodos.setBackground(new java.awt.Color(102, 255, 255));
        btnTodos.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnTodos.setText("Todos");
        btnTodos.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTodosActionPerformed(evt);
            }
        });
        jPanel1.add(btnTodos);
        btnTodos.setBounds(200, 10, 80, 30);

        btnBebidas.setBackground(new java.awt.Color(102, 255, 255));
        btnBebidas.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBebidas.setText("Bebidas");
        btnBebidas.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnBebidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBebidasActionPerformed(evt);
            }
        });
        jPanel1.add(btnBebidas);
        btnBebidas.setBounds(290, 10, 80, 30);

        btnBebidasA.setBackground(new java.awt.Color(102, 255, 255));
        btnBebidasA.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBebidasA.setText("Alcoólicas");
        btnBebidasA.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnBebidasA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBebidasAActionPerformed(evt);
            }
        });
        jPanel1.add(btnBebidasA);
        btnBebidasA.setBounds(380, 10, 90, 30);

        btnPorcoes.setBackground(new java.awt.Color(102, 255, 255));
        btnPorcoes.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnPorcoes.setText("Porções");
        btnPorcoes.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnPorcoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPorcoesActionPerformed(evt);
            }
        });
        jPanel1.add(btnPorcoes);
        btnPorcoes.setBounds(480, 10, 80, 30);

        btnOutros.setBackground(new java.awt.Color(102, 255, 255));
        btnOutros.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnOutros.setText("Outros");
        btnOutros.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnOutros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutrosActionPerformed(evt);
            }
        });
        jPanel1.add(btnOutros);
        btnOutros.setBounds(760, 10, 90, 30);

        btnDeB.setBackground(new java.awt.Color(102, 255, 255));
        btnDeB.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDeB.setText("Balas e Doces");
        btnDeB.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnDeB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeBActionPerformed(evt);
            }
        });
        jPanel1.add(btnDeB);
        btnDeB.setBounds(660, 10, 90, 30);

        fbProduto.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        fbProduto.setForeground(new java.awt.Color(255, 255, 255));
        fbProduto.setText("Produto:");
        fbProduto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(fbProduto);
        fbProduto.setBounds(10, 420, 402, 51);

        label.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        label.setForeground(new java.awt.Color(255, 255, 255));
        label.setText("Quantidade:");
        jPanel1.add(label);
        label.setBounds(420, 430, 140, 51);
        jPanel1.add(txtQuantidade);
        txtQuantidade.setBounds(570, 422, 99, 50);

        btnAdicionar.setBackground(new java.awt.Color(153, 204, 0));
        btnAdicionar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnAdicionar.setText("Adicionar");
        btnAdicionar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });
        jPanel1.add(btnAdicionar);
        btnAdicionar.setBounds(690, 420, 179, 56);

        btnBis.setBackground(new java.awt.Color(51, 255, 255));
        btnBis.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBis.setText("Biscoitos");
        btnBis.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnBis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBisActionPerformed(evt);
            }
        });
        jPanel1.add(btnBis);
        btnBis.setBounds(570, 10, 80, 30);

        txtPesquisa.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jPanel1.add(txtPesquisa);
        txtPesquisa.setBounds(670, 100, 180, 40);

        btnPesquisar.setBackground(new java.awt.Color(255, 255, 0));
        btnPesquisar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnPesquisar.setText("Pesquisar");
        btnPesquisar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });
        jPanel1.add(btnPesquisar);
        btnPesquisar.setBounds(700, 160, 120, 30);

        btnPagar.setBackground(new java.awt.Color(153, 255, 0));
        btnPagar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnPagar.setText("PAGAR");
        btnPagar.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(0, 0, 0)));
        btnPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagarActionPerformed(evt);
            }
        });
        jPanel1.add(btnPagar);
        btnPagar.setBounds(710, 260, 140, 60);

        btnCancelar.setBackground(new java.awt.Color(255, 0, 0));
        btnCancelar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnCancelar.setText("CANCELAR");
        btnCancelar.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(0, 0, 0)));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancelar);
        btnCancelar.setBounds(710, 330, 140, 60);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(10, 250, 880, 490);

        NunesBar.setFont(new java.awt.Font("Lucida Bright", 1, 48)); // NOI18N
        NunesBar.setForeground(new java.awt.Color(255, 255, 0));
        NunesBar.setText("NUNES BAR");
        getContentPane().add(NunesBar);
        NunesBar.setBounds(20, 160, 300, 70);

        Logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/Logo.png"))); // NOI18N
        getContentPane().add(Logo);
        Logo.setBounds(280, 10, 320, 220);

        btnMenu.setBackground(new java.awt.Color(255, 153, 51));
        btnMenu.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnMenu.setText("MENU");
        btnMenu.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });
        getContentPane().add(btnMenu);
        btnMenu.setBounds(10, 10, 120, 50);

        fundo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/fundo.900x749.jpg"))); // NOI18N
        getContentPane().add(fundo);
        fundo.setBounds(0, 0, 900, 749);

        setSize(new java.awt.Dimension(916, 788));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        FMenu menu = new FMenu(listaProdutos); // Cria uma nova janela de menu, passando a lista de produtos
        this.dispose(); // Fecha a janela atual
        menu.setLocationRelativeTo(null); // Define a posição da nova janela como centralizada
        menu.setVisible(true); // Torna a nova janela visível
    }//GEN-LAST:event_btnMenuActionPerformed


    private void btnBebidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBebidasActionPerformed
        updateTable("Bebidas");
    }//GEN-LAST:event_btnBebidasActionPerformed

    private void btnBebidasAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBebidasAActionPerformed
        updateTable("Bebidas Alcoólicas");
    }//GEN-LAST:event_btnBebidasAActionPerformed

    private void btnPorcoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPorcoesActionPerformed
        updateTable("Porções");
    }//GEN-LAST:event_btnPorcoesActionPerformed

    private void btnBisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBisActionPerformed
        updateTable("Biscoitos");
    }//GEN-LAST:event_btnBisActionPerformed

    private void btnDeBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeBActionPerformed
        updateTable("Balas e Doces");
    }//GEN-LAST:event_btnDeBActionPerformed

    private void btnTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodosActionPerformed
        carregarProdutos(); // Carrega todos os produtos novamente
    }//GEN-LAST:event_btnTodosActionPerformed

    private void btnOutrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutrosActionPerformed
        updateTable("Outros");
    }//GEN-LAST:event_btnOutrosActionPerformed

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        updateTable(txtPesquisa.getText().trim());
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        // Obtém a linha selecionada na tabela de produtos
        int selectedRow = jTCaixa.getSelectedRow();
        if (selectedRow == -1) {
            // Se nenhuma linha estiver selecionada, exibe um aviso e retorna
            JOptionPane.showMessageDialog(null, "Selecione um produto na tabela.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Obtém o produto selecionado com base na linha selecionada
        Produtos produtoSelecionado = listaProdutos.get(selectedRow);

        // Obtém a quantidade digitada no campo de quantidade
        String quantidadeStr = txtQuantidade.getText().trim();
        if (quantidadeStr.isEmpty()) {
            // Se o campo de quantidade estiver vazio, exibe um aviso e retorna
            JOptionPane.showMessageDialog(null, "Digite a quantidade desejada.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Converte a quantidade de string para inteiro
        int quantidade = Integer.parseInt(quantidadeStr);

        // Define a quantidade para o produto selecionado (supondo que exista um setter para quantidade na classe Produto)
        produtoSelecionado.setQuantidade(quantidade);

        // Adiciona o produto selecionado à lista de produtos selecionados
        produtosSelecionados.add(produtoSelecionado);

        // Exibe um diálogo de confirmação
        JOptionPane.showMessageDialog(null, "Produto Adicionado no Carrinho.");

        // Limpa o campo de quantidade
        txtQuantidade.setText("");
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void btnPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagarActionPerformed
        // Verifica se há itens no carrinho de compras
        if (produtosSelecionados.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Não há produtos adicionados ao carrinho.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        StringBuilder mensagem = new StringBuilder();
        mensagem.append("Detalhes do Pedido:\n");
        double valorTotal = 0.0;

        // Variável para controlar a primeira linha no CSV
        boolean primeiraLinha = true;

        // StringBuilder para armazenar os dados do CSV
        StringBuilder csvData = new StringBuilder();

        // Itera sobre os produtos selecionados para calcular subtotal e valor total
        for (Produtos produto : produtosSelecionados) {
            double subtotal = produto.getQuantidade() * produto.getValor();
            valorTotal += subtotal;

            // Monta a mensagem com os detalhes do pedido
            mensagem.append("Produto: ").append(produto.getNome()).append("\n");
            mensagem.append("Quantidade: ").append(produto.getQuantidade()).append("\n");
            mensagem.append("Subtotal: R$ ").append(String.format("%.2f", subtotal)).append("\n");

            // Preparando para salvar em CSV
            if (!primeiraLinha) {
                csvData.append("\n"); // Pula uma linha entre vendas no CSV
            }
            csvData.append(produto.getNome()).append(";");
            csvData.append(produto.getQuantidade()).append(";");
            csvData.append(String.format("%.2f", subtotal));

            primeiraLinha = false; // Após a primeira linha, seta para false para pular linha entre vendas no próximo ciclo

            try {
                // Consulta a quantidade atual do produto no banco de dados
                Produtos produtoNoBanco = produtoDAO.buscarProduto(produto.getIdproduto());
                if (produtoNoBanco == null) {
                    JOptionPane.showMessageDialog(null, "Produto não encontrado com o ID: " + produto.getIdproduto(), "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                int quantidadeAtual = produtoNoBanco.getQuantidade();
                int novaQuantidade = quantidadeAtual - produto.getQuantidade();

                // Atualiza a quantidade no banco de dados
                produtoDAO.atualizarQuantidadeProduto(produto.getIdproduto(), novaQuantidade);

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Erro ao atualizar quantidade do produto: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // Exibe um JOptionPane para confirmar a finalização da venda, incluindo o valor total da compra
        int option = JOptionPane.showConfirmDialog(null, mensagem.toString() + "\nValor Total da Compra: R$ " + String.format("%.2f", valorTotal) + "\n\nDeseja finalizar a venda?", "Finalizar Venda", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            // Chama o método para salvar o CSV
            salvarCSV(csvData.toString(), valorTotal);

            // Exibe a mensagem de venda efetuada com sucesso
            JOptionPane.showMessageDialog(null, "Venda efetuada com sucesso!\nValor Total da Compra: R$ " + String.format("%.2f", valorTotal), "Venda", JOptionPane.INFORMATION_MESSAGE);

            // Limpa a lista de produtos selecionados e o valor total da compra
            produtosSelecionados.clear();

            // Atualiza a tabela de produtos (supondo que carregarProdutos() atualize a interface gráfica com os produtos atualizados)
            carregarProdutos();
        } else {
            // Caso o usuário escolha não finalizar a venda, apenas retorna
            return;
        }
    }//GEN-LAST:event_btnPagarActionPerformed

    // Método para salvar os dados em um arquivo CSV
    private void salvarCSV(String csvData, double valorTotal) {
        String nomeArquivo = "./ArquivoCSV/Detalhes_vendas.csv";
        boolean arquivoExiste = new File(nomeArquivo).exists();

        try (PrintWriter writer = new PrintWriter(new FileWriter(nomeArquivo, true))) { // true para append

            // Se o arquivo não existir, adiciona o cabeçalho
            if (!arquivoExiste) {
                writer.println("Produto;Quantidade;Valor;");
            }

            // Escreve os dados da venda
            writer.println(csvData);

            // Adiciona uma linha em branco para separar registros de vendas
            writer.println();

            // Adiciona a linha com o valor total formatado como moeda
            writer.println("Valor Total da Compra;" + valorTotal);
            writer.println("");

            // Exibe mensagem de sucesso
            JOptionPane.showMessageDialog(null, "Dados da venda salvos com sucesso no arquivo CSV: " + nomeArquivo, "Sucesso", JOptionPane.INFORMATION_MESSAGE);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar dados da venda no arquivo CSV: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        listaProdutos.clear();
        JOptionPane.showMessageDialog(null, "Venda cancelada. Retornando ao menu.", "Venda Cancelada", JOptionPane.INFORMATION_MESSAGE);

        FMenu menu = new FMenu(listaProdutos); // Cria uma nova janela de menu, passando a lista de produtos
        this.dispose(); // Fecha a janela atual
        menu.setLocationRelativeTo(null); // Define a posição da nova janela como centralizada
        menu.setVisible(true); // Torna a nova janela visível
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FCaixa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Logo;
    private javax.swing.JLabel NunesBar;
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnBebidas;
    private javax.swing.JButton btnBebidasA;
    private javax.swing.JButton btnBis;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnDeB;
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton btnOutros;
    private javax.swing.JButton btnPagar;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnPorcoes;
    private javax.swing.JButton btnTodos;
    private javax.swing.JLabel fbProduto;
    private javax.swing.JLabel fundo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTCaixa;
    private javax.swing.JLabel label;
    private javax.swing.JLabel label1;
    private javax.swing.JTextField txtPesquisa;
    private javax.swing.JTextField txtQuantidade;
    // End of variables declaration//GEN-END:variables
}
